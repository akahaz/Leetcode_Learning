class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        '''
        dynamic programming basic
        '''
        m, n = len(obstacleGrid), len(obstacleGrid[0])      # get the size of the matrix
        if obstacleGrid[0][0] or obstacleGrid[m - 1][n - 1]:# there is roadblock on start or end pos
            return 0

        dp = [[0 for _ in range(n)] for _ in range(m)]      # reset the dp matrix
        for i in range(m):                                  
            if obstacleGrid[i][0] == 1:                     # there is roadblock on first col
                dp[i][0] = 0
                break
            else:
                dp[i][0] = 1
        for j in range(n):
            if obstacleGrid[0][j] == 1:
                dp[0][j] = 0
                break
            else:
                dp[0][j] = 1

        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j]:
                    dp[i][j] = 0
                else:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]
