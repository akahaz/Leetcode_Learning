class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        self.res = []                           
        check = [0 for _ in range(len(nums))]
        self.backtrack([], nums, check)
        return self.res
    
    def backtrack(self, sol, nums, check):
        if len(sol) == len(nums):           # find an available answer
            self.res.append(sol)
            return
        for i in range(len(nums)):
            if check[i] == 1:               # the number already add in answer
                continue
            if i > 0 and nums[i] == nums[i - 1] and check[k - 1] == 0:
                continue
            check[i] = 1
            self.backtrack(sol + [nums[i]], nums, check)
            check[i] = 0
