class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        def blank(n):
            return ' ' * n
        
        ans = []
        right, n = 0, len(words)
        while True:
            # left express the first word in this line
            # right express that the final word in this line
            left = right
            sumLen = 0
            # find that how many words can put in current line
            while right < n and sumLen + len(words[right]) + right - left <= maxWidth:
                sumLen += len(words[right])
                right += 1
            
            # final word of current line is the final word of the string
            if right == n:
                s = " ".join(words[left:])
                ans.append(s + blank(maxWidth - len(s)))
                break
            
            # find how many words in this line and the number of space
            numWords = right - left
            numSpaces = maxWidth - sumLen

            # current line contains one word only
            if numWords == 1:
                ans.append(words[left] + blank(numSpaces))
                continue
            
            # normal situation
            avgSpaces = numSpaces // (numWords - 1)
            extraSpaces = numSpaces % (numWords - 1)
            s1 = blank(avgSpaces + 1).join(words[left: left + extraSpaces + 1])
            s2 = blank(avgSpaces).join(words[left + extraSpaces + 1: right])
            ans.append(s1 + blank(avgSpaces) + s2)
        return ans
