class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        # backtrack and dfs
        def dfs(n, k, index, path):
            if index == n:                          # stop condition
                return
            cnt = factorial[n - 1 - index]          # one iteration number
            for i in range(1, n + 1):               # start dfs
                if used[i]:                         # the element is labeled
                    continue
                if cnt < k:                         # backtrack pruning
                    k -= cnt
                    continue
                path.append(i)
                used[i] = True
                dfs(n, k, index + 1, path)
        if n == 0:
            return ""
        used = [False for _ in range(n + 1)]
        path = []
        factorial = [1 for _ in range(n + 1)]
        for i in range(2, n + 1):
            factorial[i] = factorial[i - 1] * i 
        dfs(n, k, 0, path)
        return ''.join([str(i) for i in path])
