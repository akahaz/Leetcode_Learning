# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        '''
        Thinking:
        set a new list node to save the result of each digit
        use a remainder save the value of current digit
        use a carry judge if it have to +1 for next digit

        Coding:
        1. find the values of the current node of l1 and l2
        2. create a new node for save current digit and judge if it carry
        3. point to next digit
        '''
        # init
        dummy = ListNode()              # define a new node list to save the value
        tail = dummy                    # set the tail for the dummy
        carry = 0                       # carry operation
        remainder = 0                   # remainder value
        # traverse l1 and l2
        while l1 or l2:
            l1_val = l1.val if l1 else 0
            l2_val = l2.val if l2 else 0
            sum_node = l1_val + l2_val + carry
            carry = sum_node // 10
            remainder = sum_node % 10
            tail.next = ListNode(remainder)
            if l1: l1 = l1.next
            if l2: l2 = l2.next
            tail = tail.next
        if carry: tail.next = ListNode(carry)
        return dummy.next
        '''
        Complexity analysis:
        time: O(n)
        space: O(n)
        '''
