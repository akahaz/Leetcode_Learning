class Solution:
    def maxValue(self, n: int, index: int, maxSum: int) -> int:
        '''
        Thinking:
        use greedy thought, the array as
        1. nums[index] be the larger
        2. for position that left and right of index, minus one
        use binary search find an array such that max(numsSum) <= maxSum

        Coding:
        build binary search framework, and set the condition
        finding the sum of right side and left side
        '''
        left, right = 1, maxSum                         # set the left boundary and right bondary of binary search
        # standard binary search framework
        while left < right:
            mid = (left + right + 1) // 2
            # valid() function as find the sum of array and compare to maximum
            if self.valid(mid, n, index, maxSum):       
                left = mid
            else:
                right = mid - 1
        return left

    def valid(self, mid: int, n: int, index: int, maxSum: int) -> bool:
        left = index
        right = n - index - 1
        return mid + self.cal(mid, left) + self.cal(mid, right) <= maxSum

    def cal(self, big: int, length: int) -> int:
        if length + 1 < big:
            small = big - length
            return ((big - 1 + small) * length) // 2
        else:
            ones = length - (big - 1)
            return (big - 1 + 1) * (big - 1) // 2 + ones
